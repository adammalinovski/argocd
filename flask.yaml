apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-app
  labels:
    app: flask-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      containers:
      - name: flask-app-container
        image: adam943/flask-app:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 5001
          name: http
        env:
        - name: DB_HOST
          value: "mysql-svc"
        - name: DB_NAME
          value: "test"
        - name: DB_USER
          value: "root"
        - name: DB_PASSWORD
          value: "123"

---
# 2. Service (ClusterIP): Internal load balancer for Flask (in 'default' namespace)
apiVersion: v1
kind: Service
metadata:
  name: flask-service       # Name of the internal Service for Flask App
spec:
  type: ClusterIP
  selector:
    app: flask-app          # Selects Flask Pods
  ports:
  - name: http
    protocol: TCP
    port: 80                # Service listens on port 80
    targetPort: http        # Forward traffic to Pod's 'http' port (5001)

---
# 3. Ingress: Exposes the internal Flask Service externally (in 'default' namespace)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: flask-ingress
  annotations:
    # --- Ensure these annotations match YOUR Ingress Controller ---
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec: # <--- Ingress specification starts here
  rules:
  # You can add a '- host: your.domain.com' here if needed
  - http:
      paths:
      - path: /               # Match requests starting with /
        pathType: Prefix
        backend:
          service:
            name: flask-service # Target the Flask Service (NOT mysql-svc)
            port:
              name: http      # Target the 'http' port (port 80) on the Flask Service